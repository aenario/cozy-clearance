{"version":3,"sources":["client/contact_autocomplete.coffee","client/contact_collection.coffee","client/modal.coffee","client/modal_share_template.jade","client/modal_share_view.coffee"],"names":["module","exports","input","onGuestAdded","extrafilter","contactCollection","require","on","event","which","data","shown","val","preventDefault","typeahead","source","query","contacts","items","regexp","RegExp","filter","contact","match","forEach","get","email","push","id","hasPicture","display","toString","matcher","old","$","fn","Constructor","prototype","call","this","sorter","beginswith","caseInsensitive","caseSensitive","item","shift","toLowerCase","indexOf","concat","highlighter","img","updater","value","Contact","collection","__hasProp","hasOwnProperty","Backbone","Collection","url","model","_super","__extends","urlRoot","test","some","Model","fetch","handleRealtimeContactEvent","doctype","operation","success","add","remove","Modal","__bind","me","apply","arguments","className","attributes","data-backdrop","data-keyboard","initialize","options","title","content","yes","no","cb","render","saving","$el","modal","click","_this","stopPropagation","onNo","document","closeOnEscape","events","click #modal-dialog-no","click #modal-dialog-yes","close","onYes","closing","setTimeout","e","off","__super__","body","container","foot","head","yesBtn","text","append","renderContent","prepend","onClickAnywhere","target","View","alert","confirm","yesMsg","noMsg","error","t","register","__templateData","locals","jade_interp","buf","locals_","type","clearance","makeURL","undefined","possible_permissions","jade","escape","name","JSON","stringify","attr","$$obj","length","i","$$l","rule","key","keys","Object","perm","join","define","amd","CozyClearanceModal","clearanceDiff","contactTypeahead","randomString","request","string","Math","random","substr","now","_","findWhere","method","params","dataType","contentType","ajax","extend","template_content","click #share-public","click #share-private","click #modal-dialog-share-save","click .revoke","click .show-link","click #add-contact","change select.changeperm","permissions","r","onClose","set","initState","parse","getRenderData","getClearanceWithContacts","afterRender","_checkToggleButtonState","_configureTypeAhead","_firstFocus","isPublicClearance","show","hide","isPrivateClearance","addClass","typeaheadFilter","focus","select","refresh","html","makePublic","lastClearance","makePrivate","getPublicURL","existsEmail","split","map","out","clone","contactid","doSave","sendmail","clearances","saveData","trigger","showLink","label","line","link","urlField","parents","find","currentTarget","prop","onAddClicked","result","isEmailEmpty","_ref","revoke","dataset","changePerm","selectedIndex","diffLength","diffNews","hasChanged","confirmed","newClearances"],"mappings":"unCAAAA,EAAOC,QAAU,SAACC,EAAOC,EAAcC,GAEnC,GAAAC,SAAAA,GAAoBC,EAAQ,kCAC5BF,EAAe,kBAAG,IAGlBF,EAAMK,GAAG,QAAS,SAACC,GACf,MAAkB,MAAfA,EAAMC,OAAgBP,EAAUQ,KAAK,aAAaC,MAArD,QACIR,EAAaD,EAAMU,OACnBV,EAAMU,IAAI,IACVJ,EAAMK,oBAGdX,EAAMY,WACFC,OAAQ,SAACC,GACL,GAAAC,GAAAC,EAAAC,CAcA,OAdAA,GAAa,GAAAC,QAAOJ,GACpBC,EAAWZ,EAAkBgB,OAAO,SAACC,SACjCA,GAAQC,MAAMJ,KAClBD,KACAD,EAASO,QAAQ,SAACF,SACdA,GAAQG,IAAI,UAAUD,QAAQ,SAACE,SAC3BR,GAAMS,MACFC,GAAIN,EAAQM,GACZC,WAAYP,EAAQG,IAAI,cACxBK,QAAS,GAAGR,EAAQG,IAAI,QAAO,QAAOC,EAAM,OAC5CK,SAAU,iBAAG,GAAGL,EAAM,IAAGJ,EAAQM,UAE7CV,EAAQA,EAAMG,OAAOjB,IAIzB4B,QAAS,SAACV,GACN,GAAAW,EACA,OADAA,GAAMC,EAAEC,GAAGrB,UAAUsB,YAAWC,UAAEL,QAC3BC,EAAIK,KAAKC,KAAMjB,EAAQQ,UAElCU,OAAQ,SAACvB,GACL,GAAAwB,GAAAC,EAAAC,EAAArB,EAAAsB,CAIA,KAJAH,KACAE,KACAD,KAEOpB,EAAUL,EAAS4B,SACtBD,EAAOtB,EAAQQ,QACZc,EAASE,cAAcC,QAAQR,KAAKvB,MAAM8B,gBAErCF,EAAMG,QAAQR,KAAKvB,OAAW2B,EAAchB,KAAKL,GACpDoB,EAAgBf,KAAKL,GAFtBmB,EAAWd,KAAKL,EAIxB,OAAOmB,GAAWO,OAAOL,EAAeD,IAE5CO,YAAa,SAAC3B,GACV,GAAA4B,GAAAjB,CAKA,OALAA,GAAMC,EAAEC,GAAGrB,UAAUsB,YAAWC,UAAEY,YAClCC,EAAS5B,EAAQO,WACb,2CAA6CP,EAAQM,GAAK,eAE1D,yDACGsB,EAAMjB,EAAIK,KAAKC,KAAMjB,EAAQQ,UAExCqB,QAAS,SAACC,GAEN,MADAjD,GAAaiD,GACN,8EC1DnB,GAAAC,GAAAC,EAAAC,KAAAC,kLAAAF,GAAiB,GAAAG,UAASC,WAA1BJ,EACWK,IAAM,qBADjBL,EAGWM,MAAcP,EAAA,SAAAQ,2EACrBC,GAAAT,EAAAQ,GAAAR,EAAAhB,UAAA0B,QAAS,qBAATV,EAAAhB,UACAd,MAAO,SAACF,SACJA,GAAO2C,KAAKzB,KAACd,IAAI,UACjBc,KAACd,IAAI,UAAUwC,KAAK,SAACvC,SAAUL,GAAO2C,KAAKtC,SAJV+B,SAASS,OAHlDZ,EASWa,QATXb,EAUWc,2BAA6B,SAAC5D,GACrC,GAAA6D,GAAAzC,EAAAgC,EAAAU,CACA,IADCD,EAAA7D,EAAA6D,QAASC,EAAA9D,EAAA8D,UAAW1C,EAAApB,EAAAoB,GACS,YAAXyC,EAAnB,MAAO,KACP,QAAOC,GAAP,IACS,eACDV,GAAY,GAAAP,IAAQzB,GAAIA,IACxBgC,EAAMO,OAAMI,QAAS,iBACjBjB,GAAWkB,IAAIZ,KAJ3B,KAKS,eACDA,GAAQN,EAAW7B,IAAIG,GACvBgC,EAAMO,OAPd,KAQS,eACDP,GAAQN,EAAW7B,IAAIG,GACvB0B,EAAWmB,OAAOb,KAvB9B5D,EA0BOC,QAAUqD,4DC3BjB,GAAAoB,GAAAC,EAAA,SAAAxC,EAAAyC,GAAA,MAAA,YAAA,MAAAzC,GAAA0C,MAAAD,EAAAE,oMAAAJ,GAAA,SAAAb,yHAEIC,GAAAY,EAAAb,GAAAa,EAAArC,UAAAT,GAAG,eAAH8C,EAAArC,UACA0C,UAAU,aADVL,EAAArC,UAEA2C,YACIC,gBAAiB,SACjBC,gBAAiB,SAJrBR,EAAArC,UAMA8C,WAAY,SAACC,6BACT7C,KAAC8C,MAASD,EAAQC,4BAClB9C,KAAC+C,QAAWF,EAAQE,0BACpB/C,KAACgD,IAAOH,EAAQG,KAAO,sBACvBhD,KAACiD,GAAMJ,EAAQI,IAAM,0BACrBjD,KAACkD,GAAML,EAAQK,IAAM,cACrBlD,KAACmD,SACDnD,KAACoD,QAAS,EACVpD,KAACqD,IAAIC,MAAM,QAIXtD,KAACL,EAAE,gBAAgB4D,MAAM,SAAAC,SAAA,UAACvF,SACtBA,GAAMwF,kBACND,EAACE,SAFoB1D,OAIzBL,EAAEgE,UAAU3F,GAAG,QAASgC,KAAC4D,gBAtB7BzB,EAAArC,UAwBA+D,OAAQ,kBACJC,yBAA4B,OAC5BC,0BAA4B,QAC5BR,MAA4B,oBA3BhCpB,EAAArC,UA6BA4D,KAAM,iBACF1D,MAACgE,QACDhE,KAACkD,IAAG,IA/BRf,EAAArC,UAiCAmE,MAAO,iBACHjE,MAACgE,QACDhE,KAACkD,IAAG,IAnCRf,EAAArC,UAqCAkE,MAAO,WACH,MAAUhE,MAACkE,QAAX,QACAlE,KAACkE,SAAU,EACXlE,KAACqD,IAAIC,MAAM,QACXa,WAAY,SAAAX,SAAA,kBAAGA,GAACtB,WAAJlC,MAAe,OAzC/BmC,EAAArC,UA2CA8D,cAAe,SAACQ,GACZ,MAAsB,MAAXA,EAAElG,MAAb8B,KAAC0D,OAAD,QA5CJvB,EAAArC,UA8CAoC,OAAQ,iBACJvC,GAAEgE,UAAUU,IAAI,QAASrE,KAAC4D,eAC1BzB,EAAAmC,UAAApC,OAAAI,MAAAtC,KAAAuC,YAhDJJ,EAAArC,UAkDAqD,OAAQ,WACJ,GAAAoB,GAAAP,EAAAQ,EAAAC,EAAAC,EAAA5B,EAAA6B,QAAAX,GAAQrE,EAAE,0FACVmD,EAAQnD,EAAE,4BAA4BiF,KAAK5E,KAAC8C,OAC5C4B,EAAQ/E,EAAE,8BAA8BkF,OAAOb,EAAOlB,GACtDyB,EAAQ5E,EAAE,4BAA4BkF,OAAO7E,KAAC8E,iBAC9CH,EAAQhF,EAAE,uDAAuDiF,KAAK5E,KAACgD,KACvEyB,EAAQ9E,EAAE,8BAA8BkF,OAAOF,GACmC3E,KAACiD,IAAnFwB,EAAKM,QAAQpF,EAAE,sDAAsDiF,KAAK5E,KAACiD,KAE3EuB,EAAY7E,EAAE,+BAA+BkF,OAAOH,EAAMH,EAAME,GAChED,EAAY7E,EAAE,8BAA8BkF,OAAOL,GACnD7E,EAAE,QAAQkF,OAAO7E,KAACqD,IAAIwB,OAAOL,KA7DjCrC,EAAArC,UA+DAgF,cAAe,iBAAG9E,MAAC+C,SA/DnBZ,EAAArC,UAkEAkF,gBAAiB,SAAC/G,GAAU,MAAWA,GAAMgH,OAAO5F,KAAMW,KAACX,GAA/BW,KAAC0D,OAAD,WApEZxC,SAASgE,MAA7B/C,EAsEMgD,MAAQ,SAACrC,EAAOC,EAASG,SACvB,IAAAf,IAAOW,MAAAA,EAAOC,QAAAA,EAASC,IAAK,KAAMC,GAAI,KAAMC,GAAAA,KAvEpDf,EAyEMiD,QAAU,SAACtC,EAAOC,EAASsC,EAAQC,EAAOpC,SACxC,IAAAf,IAAOW,MAAAA,EAAOC,QAAAA,EAASC,IAAKqC,EAAQpC,GAAGqC,EAAOpC,GAAAA,KA1EtDf,EA4EMoD,MAAQ,SAACX,EAAM1B,SACb,IAAAf,IACAW,MAAO0C,EAAE,eACTzC,QAAS6B,EACT5B,IAAKwC,EAAE,YACPvC,IAAI,EACJC,GAAIA,KAlFZzF,EAoFOC,QAAUyE,ICpFjBpE,QAAA0H,SAAA,sCAAA,SAAA/H,EAAAK,EAAAN,GAAA,GAAAiI,GAAA,SAAAC,GACA,GAEAC,GAFAC,KAGAC,EAAAH,MAAAH,EAAAM,EAAAN,EAAAO,EAAAD,EAAAC,KAAA1E,EAAAyE,EAAAzE,MAAA2E,EAAAF,EAAAE,UAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,UAAAC,EAAAL,EAAAK,oBAsJA,OArJAN,GAAAzG,KAAA,yCAAAgH,KAAAC,OAAA,OAAAT,EAAAJ,EAAA,kBAAAO,EAAA,cAAAO,KAAAjF,EAAAnC,IAAA,WAAA,GAAA0G,GAAA,4DAAAQ,KAAAC,OAAA,OAAAT,EAAAJ,EAAA,WAAA,GAAAI,GAAA,qEAAAQ,KAAAC,OAAA,OAAAT,EAAAJ,EAAA,YAAA,GAAAI,GAAA,6GACA,MAAAW,KAAAC,UAAAR,GAEAH,EAAAzG,KAAA,MAAAgH,KAAAC,OAAA,OAAAT,EAAAJ,EAAA,qBAAA,GAAAI,GAAA,SAIAC,EAAAzG,KAAA,8BAAAgH,KAAAC,OAAA,OAAAT,EAAAJ,EAAA,iCAAA,GAAAI,GAAA,QAGAC,EAAAzG,KAFA,UAAA4G,EAEA,yBAAAI,KAAAK,KAAA,QAAAR,KAAA,GAAA,GAAA,0BAIA,yBAAAG,KAAAK,KAAA,QAAAR,KAAA,GAAA,GAAA,oCAEAJ,EAAAzG,KAAA,kDAAAgH,KAAAC,OAAA,OAAAT,EAAAJ,EAAA,OAAA,GAAAI,GAAA,gBAAAQ,KAAAC,OAAA,OAAAT,EAAAJ,EAAA,iCAAA,GAAAI,GAAA,gFAAAQ,KAAAK,KAAA,cAAAjB,EAAA,gBAAAO,EAAA,gBAAA,GAAA,GAAA,yHACA,UAAAC,GAGA,WACA,GAAAU,GAAAV,CACA,IAAA,gBAAAU,GAAAC,OAEA,IAAA,GAAAC,GAAA,EAAAC,EAAAH,EAAAC,OAAAE,EAAAD,EAAAA,IAAA,CACA,GAAAE,GAAAJ,EAAAE,EAEA,IAAAE,GAAAZ,EACA,CACA,GAAAa,GAAAD,EAAAC,GACAlB,GAAAzG,KAAA,+BACA0H,EAAA/H,SAIA8G,EAAAzG,KAFA0H,EAAA/H,QAAAG,IAAA,cAEA,kBAAAkH,KAAAK,KAAA,MAAA,sBAAAK,EAAA/H,QAAAM,GAAA,QAAA,GAAA,GAAA,WAIA,2DAEAwG,EAAAzG,KAAA,gCAAAgH,KAAAC,OAAA,OAAAT,EAAAkB,EAAA/H,QAAAG,IAAA,SAAA,GAAA0G,GAAA,YAIAC,EAAAzG,KAAA,iFAAAgH,KAAAC,OAAA,OAAAT,EAAAkB,EAAA3H,OAAA,GAAAyG,GAAA,UAEA,IAAAoB,GAAAC,OAAAD,KAAAb,EACAa,GAAAL,OAAA,GAEAd,EAAAzG,KAAA,UAAAgH,KAAAK,KAAA,WAAAM,GAAA,GAAA,GAAA,wBAEA,WACA,GAAAL,GAAAP,CACA,IAAA,gBAAAO,GAAAC,OAEA,IAAA,GAAAO,GAAA,EAAAL,EAAAH,EAAAC,OAAAE,EAAAK,EAAAA,IAAA,CACA,GAAA3H,GAAAmH,EAAAQ,EAEArB,GAAAzG,KAAA,UAAAgH,KAAAK,KAAA,QAAAS,GAAA,GAAA,GAAAd,KAAAK,KAAA,WAAAK,EAAAI,MAAAA,GAAA,GAAA,GAAA,IAAAd,KAAAC,OAAA,OAAAT,EAAA,IAAAJ,EAAA,QAAAA,EAAAjG,IAAA,GAAAqG,GAAA,iBAGA,CACA,GAAAiB,GAAA,CACA,KAAA,GAAAK,KAAAR,GAAA,CACAG,GAAA,IAAAtH,GAAAmH,EAAAQ,EAEArB,GAAAzG,KAAA,UAAAgH,KAAAK,KAAA,QAAAS,GAAA,GAAA,GAAAd,KAAAK,KAAA,WAAAK,EAAAI,MAAAA,GAAA,GAAA,GAAA,IAAAd,KAAAC,OAAA,OAAAT,EAAA,IAAAJ,EAAA,QAAAA,EAAAjG,IAAA,GAAAqG,GAAA,gBAIA7F,KAAAC,MAEA6F,EAAAzG,KAAA,cAIAyG,EAAAzG,KAAAgH,KAAAC,OAAA,OAAAT,EAAA,IAAAJ,EAAA,QAAAW,EAAAa,EAAA,KAAA,GAAApB,IAEAC,EAAAzG,KAAA,KAAAgH,KAAAK,KAAA,WAAAM,GAAA,GAAA,GAAAX,KAAAK,KAAA,QAAAjB,EAAA,WAAA,GAAA,GAAA,6EAAAY,KAAAK,KAAA,WAAAM,GAAA,GAAA,GAAAX,KAAAK,KAAA,QAAAjB,EAAA,aAAA,GAAA,GAAAY,KAAAK,KAAA,OAAAR,EAAAc,IAAA,GAAA,GAAA,sGAIA,CACA,GAAAF,GAAA,CACA,KAAA,GAAAD,KAAAF,GAAA,CACAG,GAAA,IAAAC,GAAAJ,EAAAE,EAEA,IAAAE,GAAAZ,EACA,CACA,GAAAa,GAAAD,EAAAC,GACAlB,GAAAzG,KAAA,+BACA0H,EAAA/H,SAIA8G,EAAAzG,KAFA0H,EAAA/H,QAAAG,IAAA,cAEA,kBAAAkH,KAAAK,KAAA,MAAA,sBAAAK,EAAA/H,QAAAM,GAAA,QAAA,GAAA,GAAA,WAIA,2DAEAwG,EAAAzG,KAAA,gCAAAgH,KAAAC,OAAA,OAAAT,EAAAkB,EAAA/H,QAAAG,IAAA,SAAA,GAAA0G,GAAA,YAIAC,EAAAzG,KAAA,iFAAAgH,KAAAC,OAAA,OAAAT,EAAAkB,EAAA3H,OAAA,GAAAyG,GAAA,UAEA,IAAAoB,GAAAC,OAAAD,KAAAb,EACAa,GAAAL,OAAA,GAEAd,EAAAzG,KAAA,UAAAgH,KAAAK,KAAA,WAAAM,GAAA,GAAA,GAAA,wBAEA,WACA,GAAAL,GAAAP,CACA,IAAA,gBAAAO,GAAAC,OAEA,IAAA,GAAAO,GAAA,EAAAL,EAAAH,EAAAC,OAAAE,EAAAK,EAAAA,IAAA,CACA,GAAA3H,GAAAmH,EAAAQ,EAEArB,GAAAzG,KAAA,UAAAgH,KAAAK,KAAA,QAAAS,GAAA,GAAA,GAAAd,KAAAK,KAAA,WAAAK,EAAAI,MAAAA,GAAA,GAAA,GAAA,IAAAd,KAAAC,OAAA,OAAAT,EAAA,IAAAJ,EAAA,QAAAA,EAAAjG,IAAA,GAAAqG,GAAA,iBAGA,CACA,GAAAiB,GAAA,CACA,KAAA,GAAAK,KAAAR,GAAA,CACAG,GAAA,IAAAtH,GAAAmH,EAAAQ,EAEArB,GAAAzG,KAAA,UAAAgH,KAAAK,KAAA,QAAAS,GAAA,GAAA,GAAAd,KAAAK,KAAA,WAAAK,EAAAI,MAAAA,GAAA,GAAA,GAAA,IAAAd,KAAAC,OAAA,OAAAT,EAAA,IAAAJ,EAAA,QAAAA,EAAAjG,IAAA,GAAAqG,GAAA,gBAIA7F,KAAAC,MAEA6F,EAAAzG,KAAA,cAIAyG,EAAAzG,KAAAgH,KAAAC,OAAA,OAAAT,EAAA,IAAAJ,EAAA,QAAAW,EAAAa,EAAA,KAAA,GAAApB,IAEAC,EAAAzG,KAAA,KAAAgH,KAAAK,KAAA,WAAAM,GAAA,GAAA,GAAAX,KAAAK,KAAA,QAAAjB,EAAA,WAAA,GAAA,GAAA,6EAAAY,KAAAK,KAAA,WAAAM,GAAA,GAAA,GAAAX,KAAAK,KAAA,QAAAjB,EAAA,aAAA,GAAA,GAAAY,KAAAK,KAAA,OAAAR,EAAAc,IAAA,GAAA,GAAA,qGAKAhH,KAAAC,MAGA6F,EAAAzG,KAAA,UACAyG,EAAAsB,KAAA,IAEA,mBAAAC,SAAAA,OAAAC,IACAD,UAAA,WACA,MAAA1B,KAEA,gBAAAjI,IAAAA,GAAAA,EAAAC,UACAD,EAAAC,QAAAgI,wECjKA,GAAA4B,GAAAnF,EAAAoF,EAAAzJ,EAAA0J,EAAAC,EAAAC,EAAAtF,EAAA,SAAAxC,EAAAyC,GAAA,MAAA,YAAA,MAAAzC,GAAA0C,MAAAD,EAAAE,oMAAAJ,GAAQpE,EAAQ,WAAhByJ,EACmBzJ,EAAQ,0BAD3BD,EAEoBC,EAAQ,wBAF5B0J,EAOe,SAACd,GACZ,GAAAgB,EAC+C,eAFnChB,EAAO,IACnBgB,EAAS,GAC4CA,EAAOhB,OAASA,GAArEgB,GAAUC,KAAKC,SAASrI,SAAS,IAAIsI,OAAO,SAC5CH,GAAOG,OAAO,EAAGnB,IAVrBY,EAcgB,SAACQ,EAAKrI,GAClB,MAAU,WAAPqI,KAEO,WAAPrI,EACQqI,EAEJA,EAAIjJ,OAAO,SAACgI,UACfkB,EAAMC,UAAUvI,GAAKqH,IAAKD,EAAKC,SArBvCW,EAyBU,SAACQ,EAAQ9G,EAAKjD,EAAM0E,GAC1B,GAAAsF,SAAAA,IACID,OAAQA,EACR9G,IAAKA,EACLgH,SAAU,OACVjK,KAAMoI,KAAKC,UAAUrI,GACrBkK,YAAa,mCACjB1I,EAAE2I,KAAKN,EAAEO,OAAOJ,EAAQtF,KAhC5BpF,EA8COC,QAAgB4J,EAAA,SAAAhG,meAEnBC,GAAA+F,EAAAhG,GAAAgG,EAAAxH,UAAAT,GAAI,uBAAJiI,EAAAxH,UACA0I,iBAAkBzK,EAAQ,0BAD1BuJ,EAAAxH,UAGA+D,OAAQ,iBAAGmE,GAAEO,OAAOjB,EAAAhD,UAAAT,OAAAvB,MAAAtC,KAAAuC,YAChBkG,sBAAuB,aACvBC,uBAAwB,cACxBC,iCAAkC,SAClCC,gBAAiB,SACjBC,mBAAoB,WACpBC,qBAAsB,eACtBC,2BAA4B,gBAVhCzB,EAAAxH,UAaAkJ,YAAa,kBACTC,EAAKzD,EAAE,OAdX8B,EAAAxH,UAgBA8C,WAAY,SAACC,SACT7C,MAACkD,GAAKlD,KAACkJ,QACPlJ,KAACqB,MAAQwB,EAAQxB,MACjBrB,KAACqB,MAAM8H,IAAI,YAAanJ,KAACqB,MAAMnC,IAAI,kBAEnCc,KAACoJ,UAAY7C,KAAK8C,MAAM9C,KAAKC,UAAUxG,KAACqB,MAAMnC,IAAI,eAClDc,KAAC8C,MAAQ0C,EAAE,WACXxF,KAACgD,IAAMwC,EAAE,QACTxF,KAACiD,GAAKuC,EAAE,UACR8B,EAAAhD,UAAA1B,WAAAN,MAAAtC,KAAAuC,YAzBJ+E,EAAAxH,UA6BAwJ,cAAe,kBACXvD,KAAM/F,KAACqB,MAAMnC,IAAI,QACjBmC,MAAOrB,KAACqB,MACR2E,UAAWhG,KAACuJ,2BACZtD,QAASjG,KAACiG,QACVE,qBAAsBnG,KAACgJ,cACvBxD,EAAGA,IAnCP8B,EAAAxH,UAsCAqD,OAAQ,iBACJmE,GAAAhD,UAAAnB,OAAApD,KAAAC,MACAL,EAAE,eAAeuC,SACjBvC,EAAE,iBAAiBoF,QAAQpF,EAAG,sCAAqC6F,EAAE,mBAAkB,aAzC3F8B,EAAAxH,UA4CAgF,cAAe,iBACXnF,GAAE,uBA7CN2H,EAAAxH,UAmDA0J,YAAa,WACT,GAAAxD,EAMA,OANAA,GAAYhG,KAACqB,MAAMnC,IAAI,iBAEvBc,KAACyJ,wBAAwBzD,GACzBhG,KAAC0J,oBAAoB1D,GACrBhG,KAAC2J,YAAY3D,GAEVhG,KAAC4J,qBACA5J,KAACL,EAAE,eAAekK,OAClBlK,EAAE,eAAemK,SAEjB9J,KAACL,EAAE,eAAemK,OACf9J,KAAC+J,qBACApK,EAAE,eAAemK,OAEjBnK,EAAE,eAAekK,SAlE7BvC,EAAAxH,UAqEA2J,wBAAyB,SAACzD,GACtB,MAAwB,gBAArBA,IAAsD,IAApBA,EAAUW,OAC3C3G,KAACL,EAAE,kBAAkBqK,SAAS,WAE9BhK,KAACL,EAAE,iBAAiBqK,SAAS,YAzErC1C,EAAAxH,UA4EA4J,oBAAqB,SAAC1D,GAClB,GAAArI,EAAA,OAA0B,gBAAvBqI,IAAmCA,EAAUW,OAAS,GACrDhJ,EAAQqC,KAACL,EAAE,gBACX6H,EAAiB7J,EAAOqC,KAACpC,aAAcoC,KAACiK,kBAF5C,QA7EJ3C,EAAAxH,UAkFA6J,YAAa,SAAC3D,SACV7B,YAAW,SAAAX,SAAA,YACP,MAAGA,GAACoG,oBACApG,EAAC7D,EAAE,eAAeuK,QAAQC,SACtBnE,EAAUW,OAAS,EACvBnD,EAAC7D,EAAE,qBAAqBwK,SADvB,SAHEnK,MAKT,MAxFNsH,EAAAxH,UA2FAsK,QAAS,iBACLpK,MAACL,EAAE,eAAe0K,KAAKrK,KAACwI,iBAAiBxI,KAACsJ,kBAC1CtJ,KAACwJ,eA7FLlC,EAAAxH,UAkGAwK,WAAY,iBAEJtK,MAACqB,MAAM8H,IADR,MAAAnJ,KAAAuK,eACYvE,UAAWhG,KAACuK,gBAEZvE,UAAU,WACzBhG,KAACoK,WAvGL9C,EAAAxH,UA0GA0K,YAAa,iBACTxK,MAACuK,cAAgBvK,KAACqB,MAAMnC,IAAI,aAC5Bc,KAACqB,MAAM8H,KAAInD,eACXhG,KAACoK,WA7GL9C,EAAAxH,UAmHAmG,QAAS,SAACc,GACN,GAAA3F,EAEA,OAFAA,GAAMpB,KAACqB,MAAMoJ,eACW1D,IAAxB3F,GAAO,QAAU2F,GACV3F,GAtHXkG,EAAAxH,UA0HAmK,gBAAiB,SAAC5J,UACdL,KAAK0K,YAAYrK,EAAKb,WAAWmL,MAAM,KAAK,KA3HhDrD,EAAAxH,UA8HA4K,YAAa,SAACvL,SACV6I,GAAEtG,KAAK1B,KAACqB,MAAMnC,IAAI,aAAc,SAAC4H,SAC7BA,GAAK3H,QAASA,KAhItBmI,EAAAxH,UAsIAyJ,yBAA0B,SAACvD,GAUvB,MATO,OAAAA,IACHA,EAAYhG,KAACqB,MAAMnC,IAAI,kBAEH,gBAArB8G,KACCA,EAAYA,EAAU4E,IAAI,SAAC9D,GACvB,GAAA+D,SAAAA,GAAM7C,EAAE8C,MAAMhE,GACX+D,EAAIE,YACHF,EAAI9L,QAAUjB,EAAkBoB,IAAI4H,EAAKiE,YAC7CF,KACD7E,GAhJXsB,EAAAxH,UAmJAkL,OAAQ,SAACC,EAAUC,SACfxD,GAAQ,MAAQ,aAAY1H,KAACqB,MAAMhC,GAAMW,KAACmL,YACtC5F,MAAO,iBAAGpD,GAAMoD,MAAMC,EAAE,0BACxBxD,QAAS,SAAAwB,SAAA,YAIL,MADAA,GAACnC,MAAM+J,QAAQ,SAAU5H,EAACnC,OACvB4J,EAECvD,EAAQ,OAAS,aAAYlE,EAACnC,MAAMhC,GAAG,QAAQ6L,GAC3C3F,MAAO,iBAAGpD,GAAMoD,MAAMC,EAAE,mBACxBxD,QAAS,iBAAUwB,GAACH,IAAIC,MAAM,WAJjBE,EAACH,IAAIC,MAAM,UAJ3BtD,SAtJjBsH,EAAAxH,UAiKAqL,SAAU,kBACNnF,UAAWhG,KAACqB,MAAMnC,IAAI,eAlK1BoI,EAAAxH,UAqKAuL,SAAU,SAACpN,GACP,GAAAqN,GAAAC,EAAAC,EAAApK,EAAAqK,CAgBA,OAhBAF,GAAO5L,EAAE1B,EAAMgH,QAAQyG,QAAQ,MACK,IAAjCH,EAAKI,KAAK,aAAahF,QACtB6E,EAAO7L,EAAE1B,EAAM2N,eACfxK,EAAMoK,EAAKK,KAAK,QAEhBN,EAAO5L,EAAE,0BACT2L,EAAQ3L,EAAE,WAAWiF,KAAKY,EAAE,oBAC5BiG,EAAW9L,EAAE,uBACRtB,IAAI+C,GAEToK,EAAKE,QAAQ,MAAM7G,OAAO0G,EAAK1G,OAAOyG,EAAOG,IAC7CA,EAASvB,QAAQC,SACjBlM,EAAMK,kBAENiN,EAAKI,KAAK,aAAazJ,UAEpB,GAtLXoF,EAAAxH,UAyLA8J,kBAAmB,iBACY,WAA3B5J,KAACqB,MAAMnC,IAAI,cA1LfoI,EAAAxH,UA6LAiK,mBAAoB,WAChB,GAAA/D,SAAAA,GAAYhG,KAACqB,MAAMnC,IAAI,aACF,gBAArB8G,IAAsD,IAApBA,EAAUW,QA/LhDW,EAAAxH,UAmMAgM,aAAc,iBACV9L,MAACpC,aAAaoC,KAACL,EAAE,gBAAgBtB,QApMrCiJ,EAAAxH,UAyMAlC,aAAc,SAACmO,GACX,GAAA/F,GAAA+E,EAAA5L,EAAA6M,EAAAjF,EAAAG,EAAA+E,CAGA,OAHAA,GAAqBF,EAAOpB,MAAM,KAAjCxL,EAAA8M,EAAA,GAAOlB,EAAAkB,EAAA,GACRD,EAAwB,KAAT7M,GAAeA,EAAMqB,QAAQ,KAAO,EAE5CR,KAAC0K,YAAYvL,IAAU6M,EAYnB,MAXPjF,EAAMU,IACNP,EAAO,IAGHlB,EADDhG,KAAC4J,uBAGY5J,KAACqB,MAAMnC,IAAI,aAC3B8G,EAAU5G,MAAM2L,UAAAA,EAAW5L,MAAAA,EAAO4H,IAAAA,EAAKG,KAAAA,IACvClH,KAACqB,MAAM8H,KAAInD,UAAWA,IACtBhG,KAACoK,YAvNT9C,EAAAxH,UA4NAoM,OAAQ,SAACjO,GACL,GAAA+H,SAAAA,GAAYhG,KAACqB,MAAMnC,IAAI,aAClBJ,OAAO,SAACgI,SAASA,GAAKC,MAAS9I,EAAM2N,cAAcO,QAAQpF,MAI5D/G,KAACqB,MAAM8H,IADY,IAApBnD,EAAUW,QACEX,UAAW,WAEXA,UAAWA,IAC1BhG,KAACoK,WArOL9C,EAAAxH,UAyOAsM,WAAY,SAACnO,GACT,GAAAkM,SAAAA,GAASlM,EAAM2N,cACf5L,KAACqB,MAAMnC,IAAI,aACNJ,OAAO,SAACgI,SAASA,GAAKC,MAAOoD,EAAOgC,QAAQpF,MAAK,GACjDG,KAAOiD,EAAOtH,QAAQsH,EAAOkC,eAAexL,MACjDb,KAACoK,WA9OL9C,EAAAxH,UAkPA4D,KAAM,WACF,GAAAsC,GAAAsG,EAAAC,EAAAC,CAMA,OANAxG,GAAYhG,KAACqB,MAAMnC,IAAI,aACvBqN,EAA4D,IAAjDhF,EAAcvB,EAAWhG,KAACoJ,WAAWzC,OAChD2F,EAAatG,EAAUW,SAAY3G,KAACoJ,UAAUzC,OAE9C6F,EAAaD,GAAYD,EAEtBE,EACCrK,EAAMiD,QAAQI,EAAE,WAAYA,EAAE,sBAC1BA,EAAE,OAAQA,EAAE,MAAO,SAAAhC,SAAA,UAACiJ,GAChB,MAASA,GAATnF,EAAAhD,UAAAZ,KAAApB,MAAAkB,EAAAjB,WAAA,SADevC,OAGvBsH,EAAAhD,UAAAZ,KAAApB,MAAAtC,KAAAuC,YA9PR+E,EAAAxH,UAgQAmE,MAAO,WACH,GAAA+B,GAAAuG,CAEA,OAFAvG,GAAYhG,KAACqB,MAAMnC,IAAI,aACvBqN,EAA4D,IAAjDhF,EAAcvB,EAAWhG,KAACoJ,WAAWzC,OAC7C3G,KAACL,EAAE,gBAAgBtB,QAAUkO,EAG5BpK,EAAMiD,QAAQI,EAAE,WAAYA,EAAE,oBAC1BA,EAAE,aAAcA,EAAE,cAAe,SAAAhC,SAAA,UAACiJ,GAC9B,MAASA,GAATnF,EAAAhD,UAAAL,MAAA3B,MAAAkB,EAAAjB,WAAA,SAD6BvC,OAGrCsH,EAAAhD,UAAAL,MAAA3B,MAAAtC,KAAAuC,YA1QR+E,EAAAxH,UA4QAoJ,QAAS,SAAC9F,GACN,GAAAsJ,GAAA9H,CAAA,OAAGxB,IAGCsJ,EAAgBnF,EAAcvH,KAACqB,MAAMnC,IAAI,aAAcc,KAACoJ,WACrDsD,EAAc/F,QACb/B,EAAOY,EAAE,uBAAyBkH,EAC7B9B,IAAI,SAAC9D,SAASA,GAAK3H,QACnBgI,KAAK,MAEVhF,EAAMiD,QAAQI,EAAE,oBAAqBZ,EACjCY,EAAE,OAAQA,EAAE,MAAO,SAAAhC,SAAA,UAACyH,SAChBzH,GAACwH,OAAOC,EAAUyB,KADH1M,QAIvBA,KAACgL,QAAO,IAbZhL,KAACqB,MAAM8H,KAAInD,UAAWhG,KAACoJ,gBAhRejH","file":"/Users/m4dz/Projets/dev.cozy/apps/cozy-clearance/client-build.min.js.map","sourcesContent":["module.exports = (input, onGuestAdded, extrafilter) ->\n\n    contactCollection = require './contact_collection'\n    extrafilter ?= -> true\n\n    # email not in contact\n    input.on 'keyup', (event) ->\n        if event.which is 13 and not input.data('typeahead').shown\n            onGuestAdded input.val()\n            input.val ''\n            event.preventDefault()\n\n    # contact typeahead\n    input.typeahead\n        source: (query) ->\n            regexp = new RegExp(query)\n            contacts = contactCollection.filter (contact) ->\n                contact.match regexp\n            items = []\n            contacts.forEach (contact) ->\n                contact.get('emails').forEach (email) ->\n                    items.push\n                        id: contact.id\n                        hasPicture: contact.get 'hasPicture'\n                        display: \"#{contact.get 'name'} &lt;#{email}&gt;\"\n                        toString: -> \"#{email};#{contact.id}\"\n\n            items = items.filter extrafilter\n\n            return items\n\n        matcher: (contact) ->\n            old = $.fn.typeahead.Constructor::matcher\n            return old.call this, contact.display\n\n        sorter: (contacts) ->\n            beginswith = []\n            caseSensitive = []\n            caseInsensitive = []\n\n            while (contact = contacts.shift())\n                item = contact.display\n                if not item.toLowerCase().indexOf this.query.toLowerCase()\n                    beginswith.push contact\n                else if ~item.indexOf this.query then caseSensitive.push contact\n                else caseInsensitive.push contact\n\n            return beginswith.concat caseSensitive, caseInsensitive\n\n        highlighter: (contact) ->\n            old = $.fn.typeahead.Constructor::highlighter\n            img = if contact.hasPicture\n                '<img width=\"40\" src=\"clearance/contacts/' + contact.id + '.jpg\">&nbsp;'\n            else\n                '<img width=\"40\" src=\"images/defaultpicture.png\">&nbsp;'\n            return img + old.call this, contact.display\n\n        updater: (value) ->\n            onGuestAdded value\n            return \"\"\n","# let's put this here for now\ncollection = new Backbone.Collection()\ncollection.url = 'clearance/contacts'\n\ncollection.model = class Contact extends Backbone.Model\n    urlRoot: 'clearance/contacts'\n    match: (filter) ->\n        filter.test(@get('name')) or\n        @get('emails').some (email) -> filter.test email\n\ncollection.fetch()\ncollection.handleRealtimeContactEvent = (event) ->\n    {doctype, operation, id} = event\n    return null unless doctype is 'contact'\n    switch operation\n        when 'create'\n            model = new Contact(id: id)\n            model.fetch success: (fetched) ->\n                collection.add model\n        when 'update'\n            model = collection.get id\n            model.fetch()\n        when 'delete'\n            model = collection.get id\n            collection.remove model\n\n\nmodule.exports = collection","class Modal extends Backbone.View\n\n    id:'modal-dialog'\n    className:'modal fade'\n    attributes:\n        'data-backdrop': \"static\" #prevent bs closing by backdrop\n        'data-keyboard': \"false\"  #prevent bs closing by esc\n\n    initialize: (options) ->\n        @title ?= options.title\n        @content ?= options.content\n        @yes ?= options.yes or 'ok'\n        @no ?= options.no or 'cancel'\n        @cb ?= options.cb or ->\n        @render()\n        @saving = false\n        @$el.modal 'show'\n\n        # cut default bootstrap behaviour. Done here rather than in\n        # delegateEvents to be run before bootstrap callback.\n        @$('button.close').click (event) =>\n            event.stopPropagation()\n            @onNo()\n\n        $(document).on 'keyup', @closeOnEscape\n\n    events: ->\n        \"click #modal-dialog-no\"  : 'onNo'\n        \"click #modal-dialog-yes\" : 'onYes'\n        'click'                   : 'onClickAnywhere'\n\n    onNo: ->\n        @close()\n        @cb false\n\n    onYes: ->\n        @close()\n        @cb true\n\n    close: ->\n        return if @closing\n        @closing = true\n        @$el.modal 'hide'\n        setTimeout (=> @remove()), 500\n\n    closeOnEscape: (e) =>\n        @onNo() if e.which is 27\n\n    remove: ->\n        $(document).off 'keyup', @closeOnEscape\n        super\n\n    render: ->\n        close = $('<button class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>')\n        title = $('<h4 class=\"model-title\">').text @title\n        head  = $('<div class=\"modal-header\">').append close, title\n        body  = $('<div class=\"modal-body\">').append @renderContent()\n        yesBtn= $('<button id=\"modal-dialog-yes\" class=\"btn btn-cozy\">').text @yes\n        foot  = $('<div class=\"modal-footer\">').append yesBtn\n        foot.prepend $('<button id=\"modal-dialog-no\" class=\"btn btn-link\">').text(@no) if @no\n\n        container = $('<div class=\"modal-content\">').append head, body, foot\n        container = $('<div class=\"modal-dialog\">').append container\n        $(\"body\").append @$el.append container\n\n    renderContent: -> @content\n\n    # if the target is not a child element, the click targets the backdrop\n    onClickAnywhere: (event) -> @onNo() if event.target.id is @id\n\nModal.alert = (title, content, cb) ->\n    new Modal {title, content, yes: 'ok', no: null, cb}\n\nModal.confirm = (title, content, yesMsg, noMsg, cb) ->\n    new Modal {title, content, yes: yesMsg, no:noMsg, cb}\n\nModal.error = (text, cb) ->\n    new Modal\n        title: t 'modal error'\n        content: text\n        yes: t 'modal ok'\n        no: false\n        cb: cb\n\nmodule.exports = Modal\n","div\n  div#select-mode-section\n    p= t('modal question ' + type + ' shareable', {name: model.get('name')})\n    p\n        button.button.btn-cozy#share-public= t('shared')\n        | &nbsp;\n        button.button.btn-cozy#share-private= t('private')\n  p &nbsp;\n\n// If no clearance are set, we consider it's a private object.\nif JSON.stringify(clearance) == '[]'\n  p= t('only you can see')\n\nelse\n\n  div.public-url\n      p= t('modal shared public link msg')\n      if clearance == 'public'\n          input#public-url(value=makeURL()).form-control\n      else\n          input#public-url(value=makeURL()).form-control.disabled\n      p &nbsp;\n\n  p\n    span.public-url= t('or')\n    | &nbsp;#{t('modal shared with people msg')}\n\n  form.input-group(role=\"form\")\n    input#share-input.form-control(type=\"text\", placeholder=t('modal shared ' + type + ' custom msg'), autocomplete=\"off\")\n    a#add-contact.btn.btn-cozy Add\n  ul#share-list\n    if clearance != 'public'\n        each rule, i in clearance\n          if rule != undefined\n              - var key = rule.key\n              li.clearance-line\n\n                if rule.contact\n                  if rule.contact.get('hasPicture')\n                    img(width=\"40\" src=\"clearance/contacts/\" + rule.contact.id + \".jpg\")\n                    | &nbsp;\n                  else\n                    img(width=\"40\" src=\"images/defaultpicture.png\")\n                    | &nbsp;\n\n                  span.clearance-name\n                    = rule.contact.get('name')\n\n                else\n                  img(width=\"40\" src=\"images/defaultpicture.png\")\n                  span.clearance-name\n                    = rule.email\n\n                - var keys = Object.keys(possible_permissions)\n                if keys.length > 1\n                  select.changeperm(data-key=key)\n                    each display, perm in possible_permissions\n                      option(value=perm, selected=rule.perm==perm)= ' ' + t('perm') + t(display)\n                else\n                  = ' ' + t('perm') + possible_permissions[keys[0]]\n\n                a.clearance-btn.pull-right.revoke(\n                    data-key=key, title=t(\"revoke\")): i.icon-remove\n                a.clearance-btn.pull-right.show-link(\n                    data-key=key,title=t(\"see link\"),href=makeURL(key))\n                  i.glyphicon.glyphicon-link\n","Modal = require \"./modal\"\ncontactTypeahead = require \"./contact_autocomplete\"\ncontactCollection = require \"./contact_collection\"\n\n## Helpers\n\n# randomString for immediate key generation\nrandomString = (length=32) ->\n    string = \"\"\n    string += Math.random().toString(36).substr(2) while string.length < length\n    string.substr 0, length\n\n\n# find new clearances between now and old\nclearanceDiff = (now, old) ->\n    if now is 'public'\n        return []\n    if old is 'public'\n        return now\n    # return only rules that did not exist in init state\n    return now.filter (rule) ->\n        not _.findWhere old, key: rule.key\n\n\n# convenient method for json requests\nrequest = (method, url, data, options) ->\n    params =\n        method: method\n        url: url\n        dataType: 'json'\n        data: JSON.stringify(data)\n        contentType: 'application/json; charset=utf-8'\n    $.ajax _.extend params, options\n\n\n## Modal\n\n# Modal to allow users to manage clearance on given model. A clearance object\n# is set as a model attribute.\n# A clearance is set to\n# * 'public' if there is a single link to share with any contacts\n# * an empty array or null if the model is in a private state (no one except\n#   the cozy owner can access to the mode.\n# * an array of object describing the clearance: one for for every people with\n#   whom the model is shared. Object fields: contact id, email, access key,\n#   and permissions ('r' or 'rw').\nmodule.exports = class CozyClearanceModal extends Modal\n\n    id: 'cozy-clearance-modal'\n    template_content: require './modal_share_template'\n\n    events: -> _.extend super,\n        \"click #share-public\": \"makePublic\"\n        \"click #share-private\": \"makePrivate\"\n        'click #modal-dialog-share-save': 'onSave'\n        'click .revoke': 'revoke'\n        'click .show-link': 'showLink'\n        'click #add-contact': 'onAddClicked'\n        'change select.changeperm': 'changePerm'\n\n    # Permissions are read only by default.\n    permissions: ->\n        'r': t('r')\n\n    initialize: (options) ->\n        @cb = @onClose\n        @model = options.model\n        @model.set 'clearance', @model.get('clearance') or []\n        # keep the initState for cancellation\n        @initState = JSON.parse JSON.stringify @model.get 'clearance'\n        @title = t 'sharing'\n        @yes = t 'save'\n        @no = t 'cancel'\n        super\n\n    ## Render\n\n    getRenderData: =>\n        type: @model.get('type')\n        model: @model\n        clearance: @getClearanceWithContacts()\n        makeURL: @makeURL\n        possible_permissions: @permissions()\n        t: t\n\n    # TODO: find why it isn't displayed.\n    render: ->\n        super()\n        $('.email-hint').remove()\n        $('.modal-footer').prepend $(\"<span class='pull-left email-hint'>#{t 'send email hint'}</span>\")\n\n    # This method is aimed to be overrriden.\n    renderContent: ->\n        $ '<p>Please wait</p>'\n\n    # Performs several operations:\n    # * Change the toggled button state.\n    # * Configure the contact field autocomplete type ahead.\n    # * Focus on the url or contact field depending on the configuration.\n    afterRender: ->\n        clearance = @model.get('clearance') or []\n\n        @_checkToggleButtonState clearance\n        @_configureTypeAhead clearance\n        @_firstFocus clearance\n\n        if @isPublicClearance()\n            @$('.public-url').show()\n            $('.email-hint').hide()\n        else\n            @$('.public-url').hide()\n            if @isPrivateClearance()\n                $('.email-hint').hide()\n            else\n                $('.email-hint').show()\n\n    # Change the toggled button state depending on current clearance.\n    _checkToggleButtonState: (clearance) ->\n        if typeof(clearance) is \"object\" and clearance.length is 0\n            @$('#share-private').addClass 'toggled'\n        else\n            @$('#share-public').addClass 'toggled'\n\n    # Configure the contact field autocomplete type ahead.\n    _configureTypeAhead: (clearance) ->\n        if typeof(clearance) isnt \"object\" or clearance.length > 0\n            input = @$('#share-input')\n            contactTypeahead input, @onGuestAdded, @typeaheadFilter\n\n    # Focus on the url or contact field depending on the configuration.\n    _firstFocus: (clearance) ->\n        setTimeout =>\n            if @isPublicClearance()\n                @$('#public-url').focus().select()\n            else if clearance.length > 0\n                @$('input#share-input').select()\n        , 200\n\n    # Rebuild render data and rerender the modal body.\n    refresh: ->\n        @$('.modal-body').html @template_content @getRenderData()\n        @afterRender()\n\n    ## Modes\n\n    # Display the modal public mode.\n    makePublic: ->\n        if @lastClearance?\n            @model.set clearance: @lastClearance\n        else\n            @model.set clearance:'public'\n        @refresh()\n\n    # Display the modal private mode.\n    makePrivate: ->\n        @lastClearance = @model.get 'clearance'\n        @model.set clearance: []\n        @refresh()\n\n    ## Helpers\n\n    # Build a clearance url for given key. Key is passed as a query parameter.\n    # If no key is given, no parameter is set on the URL.\n    makeURL: (key) =>\n        url = @model.getPublicURL()\n        url += '?key=' + key if key\n        return url\n\n    # Display contact in the autocmplete combo only his email is not in the\n    # current contact list.\n    typeaheadFilter: (item) =>\n        not @existsEmail item.toString().split(';')[0]\n\n    # True if the mail is not the current clearance contact list.\n    existsEmail: (email) =>\n        _.some @model.get('clearance'), (rule) ->\n            rule.email is email\n\n    # For each clearance object (rule), it checks if a Cozy Contact is linked\n    # to it. It adds a field pointing on it in that case.\n    # Warning clearance is wrongly typed. In public mode, clearance is a\n    # string. In other modes, it's an array of objects.\n    getClearanceWithContacts: (clearance) =>\n        unless clearance?\n            clearance = @model.get('clearance') or []\n\n        if typeof(clearance) is \"object\"\n            clearance = clearance.map (rule) ->\n                out = _.clone rule\n                if out.contactid\n                    out.contact = contactCollection.get rule.contactid\n                out\n        return clearance\n\n    # Save changes to server and send mail to guests if needed.\n    doSave: (sendmail, clearances) ->\n        request 'PUT', \"clearance/#{@model.id}\", @saveData(),\n            error: -> Modal.error(t 'server error occured')\n            success: (data) =>\n                # force rerender of the view because this request\n                # doesn't trigger the set\n                @model.trigger 'change', @model\n                if not sendmail then @$el.modal 'hide'\n                else\n                    request 'POST', \"clearance/#{@model.id}/send\", clearances,\n                        error: -> Modal.error(t 'mail not send')\n                        success: (data) => @$el.modal 'hide'\n\n    # Returns data to save.\n    saveData: ->\n        clearance: @model.get('clearance')\n\n    # Display link widget for given contact in the guest list.\n    showLink: (event) ->\n        line = $(event.target).parents('li')\n        if line.find('.linkshow').length is 0\n            link = $(event.currentTarget)\n            url = link.prop 'href'\n\n            line = $('<div class=\"linkshow\">')\n            label = $('<label>').text(t 'copy paste link')\n            urlField = $('<input type=\"text\">')\n                .val(url)\n\n            link.parents('li').append line.append label, urlField\n            urlField.focus().select()\n            event.preventDefault()\n        else\n            line.find('.linkshow').remove()\n\n        return false\n\n    # Returns true clearance is set as public\n    isPublicClearance: ->\n        @model.get('clearance') is 'public'\n\n    # Returns true clearance is set as public\n    isPrivateClearance: ->\n        clearance = @model.get('clearance')\n        typeof(clearance) is \"object\" and clearance.length is 0\n\n    ## Events\n\n    onAddClicked: ->\n        @onGuestAdded @$('#share-input').val()\n\n\n    # When a guest is added, it adds a new rule to the current model clearance\n    # list.\n    onGuestAdded: (result) =>\n        [email, contactid] = result.split ';'\n        isEmailEmpty = email is '' or email.indexOf('@') < 1\n\n        unless @existsEmail(email) or isEmailEmpty\n            key = randomString()\n            perm = 'r'\n\n            if @isPublicClearance()\n                clearance = []\n            else\n                clearance = @model.get('clearance')\n            clearance.push {contactid, email, key, perm}\n            @model.set clearance: clearance\n            @refresh()\n        else\n            return null\n\n    # Remove a rule from current model clearance list.\n    revoke: (event) =>\n        clearance = @model.get('clearance')\n            .filter (rule) -> rule.key isnt event.currentTarget.dataset.key\n\n\n        if clearance.length is 0\n            @model.set clearance: 'public'\n        else\n            @model.set clearance: clearance\n        @refresh()\n\n    # Change permission for given contact. Contact is find via the click\n    # event give in parameter.\n    changePerm: (event) ->\n        select = event.currentTarget\n        @model.get('clearance')\n            .filter((rule) -> rule.key is select.dataset.key)[0]\n            .perm = select.options[select.selectedIndex].value\n        @refresh()\n\n    # When modal is closed, changes are discarded. A confirmation is requested\n    # to the user.\n    onNo: =>\n        clearance = @model.get('clearance')\n        diffNews = clearanceDiff(clearance, @initState).length isnt 0\n        diffLength = clearance.length isnt @initState.length\n\n        hasChanged = diffNews or diffLength\n\n        if hasChanged\n            Modal.confirm t(\"confirm\"), t('share confirm save'), \\\n                t(\"yes\"), t(\"no\"), (confirmed) =>\n                    super if confirmed\n        else\n            super\n\n    onYes: =>\n        clearance = @model.get('clearance')\n        diffNews = clearanceDiff(clearance, @initState).length isnt 0\n        if @$('#share-input').val() and not diffNews\n            # nothing new and share-input is filled\n            # may be the user forgot to click add / press enter\n            Modal.confirm t(\"confirm\"), t('share forgot add'), \\\n                t(\"no forgot\"), t(\"yes forgot\"), (confirmed) =>\n                    super if confirmed\n        else\n            super\n\n    onClose: (saving) =>\n        if not saving\n            @model.set clearance: @initState\n        else\n            newClearances = clearanceDiff @model.get('clearance'), @initState\n            if newClearances.length\n                text = t(\"send mails question\") + newClearances\n                    .map (rule) -> rule.email\n                    .join ', '\n\n                Modal.confirm t(\"modal send mails\"), text, \\\n                    t(\"yes\"), t(\"no\"), (sendmail) =>\n                        @doSave sendmail, newClearances\n\n            else\n                @doSave false\n\n"]}